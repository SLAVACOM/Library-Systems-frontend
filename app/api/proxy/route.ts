import { auth } from '@/lib/auth'
import { NextRequest, NextResponse } from 'next/server'

const API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8080/'

export async function GET(request: NextRequest) {
  const session = await auth()
  
  console.log('üîê Session:', session ? 'exists' : 'null')
  console.log('üîë Token:', session?.token ? `${session.token.substring(0, 20)}...` : 'missing')
  
  if (!session?.token) {
    console.log('‚ùå No token, returning 401')
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
  }

  const path = request.nextUrl.searchParams.get('path') || ''
  const url = `${API_URL}${path}`

  console.log('üîÑ Proxy GET:', url)
  console.log('üì§ Sending token:', session.token.substring(0, 30) + '...')

  try {
    const response = await fetch(url, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${session.token}`,
        'Content-Type': 'application/json'
      }
    })

    console.log('üìä Response status:', response.status)
    
    // –ï—Å–ª–∏ –±—ç–∫–µ–Ω–¥ –≤–µ—Ä–Ω—É–ª 204 No Content, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null –±–µ–∑ —Ç–µ–ª–∞
    if (response.status === 204) {
      console.log('‚úÖ 204 No Content from backend')
      return new NextResponse(null, { status: 204 })
    }
    
    if (response.status === 403) {
      console.error('üö´ Backend returned 403 Forbidden')
      console.error('üîë Token used:', session.token.substring(0, 30) + '...')
    }
    
    if (response.status === 404) {
      console.error('üîç Backend returned 404 Not Found')
      console.error('üåê URL:', url)
    }
    
    if (response.status >= 400) {
      console.error('‚ö†Ô∏è Backend error status:', response.status)
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç
    const text = await response.text()
    console.log('üìù Response text length:', text.length)
    
    // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –∫–æ—Ä–æ—Ç–∫–∏–π –∏–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞
    if (text.length < 1000 || response.status >= 400) {
      console.log('üìÑ Response:', text)
    }
    
    // –ï—Å–ª–∏ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 204
    if (!text || text.length === 0) {
      console.log('‚ö†Ô∏è Empty response from backend, returning 204')
      return new NextResponse(null, { status: 204 })
    }

    try {
      const data = JSON.parse(text)
      
      // –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ, —á—Ç–æ –ø—Ä–∏—Å–ª–∞–ª –±—ç–∫–µ–Ω–¥
      // –î–∞–∂–µ –µ—Å–ª–∏ data.data –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ - —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç
      return NextResponse.json(data, { status: response.status })
    } catch (parseError) {
      console.error('‚ùå JSON parse error:', parseError)
      console.error('Response text:', text)
      return NextResponse.json({ error: 'Invalid JSON response', text }, { status: 500 })
    }
  } catch (error) {
    console.error('‚ùå Proxy error:', error)
    return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 })
  }
}

export async function POST(request: NextRequest) {
  const session = await auth()
  
  if (!session?.token) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
  }

  const path = request.nextUrl.searchParams.get('path') || ''
  const url = `${API_URL}${path}`
  const body = await request.json()

  console.log('üîÑ Proxy POST:', url)

  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${session.token}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(body)
    })

    console.log('üìä Response status:', response.status)
    
    const text = await response.text()
    if (!text || text.length === 0) {
      return NextResponse.json({ success: true }, { status: response.status })
    }

    try {
      const data = JSON.parse(text)
      return NextResponse.json(data, { status: response.status })
    } catch (parseError) {
      console.error('‚ùå JSON parse error:', parseError)
      return NextResponse.json({ error: 'Invalid JSON response' }, { status: 500 })
    }
  } catch (error) {
    console.error('‚ùå Proxy error:', error)
    return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 })
  }
}

export async function PUT(request: NextRequest) {
  const session = await auth()
  
  if (!session?.token) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
  }

  const path = request.nextUrl.searchParams.get('path') || ''
  const url = `${API_URL}${path}`
  const body = await request.json()

  console.log('üîÑ Proxy PUT:', url)

  try {
    const response = await fetch(url, {
      method: 'PUT',
      headers: {
        'Authorization': `Bearer ${session.token}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(body)
    })

    console.log('üìä Response status:', response.status)
    
    const text = await response.text()
    if (!text || text.length === 0) {
      return NextResponse.json({ success: true }, { status: response.status })
    }

    try {
      const data = JSON.parse(text)
      return NextResponse.json(data, { status: response.status })
    } catch (parseError) {
      console.error('‚ùå JSON parse error:', parseError)
      return NextResponse.json({ error: 'Invalid JSON response' }, { status: 500 })
    }
  } catch (error) {
    console.error('‚ùå Proxy error:', error)
    return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 })
  }
}

export async function DELETE(request: NextRequest) {
  const session = await auth()
  
  if (!session?.token) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
  }

  const path = request.nextUrl.searchParams.get('path') || ''
  const url = `${API_URL}${path}`

  console.log('üîÑ Proxy DELETE:', url)

  try {
    const response = await fetch(url, {
      method: 'DELETE',
      headers: {
        'Authorization': `Bearer ${session.token}`,
        'Content-Type': 'application/json'
      }
    })

    console.log('üìä Response status:', response.status)
    
    const text = await response.text()
    if (!text || text.length === 0) {
      return NextResponse.json({ success: true }, { status: response.status })
    }

    try {
      const data = JSON.parse(text)
      return NextResponse.json(data, { status: response.status })
    } catch (parseError) {
      console.error('‚ùå JSON parse error:', parseError)
      return NextResponse.json({ error: 'Invalid JSON response' }, { status: 500 })
    }
  } catch (error) {
    console.error('‚ùå Proxy error:', error)
    return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 })
  }
}
