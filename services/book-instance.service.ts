import { IBookInstance, IBookInstanceResponse, IBookInstancesResponse, ICreateBookInstanceDto, IReserveBookInstanceDto, IUpdateBookInstanceDto } from '@/types/book-instance.interface'
import { axiosInstance } from './api.helper'

const BOOK_INSTANCES_BASE_URL = '/api/v1/book-instances'

export const bookInstanceService = {
  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –ø–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
  async getByLibrary(libraryId: string, page = 0, size = 20): Promise<IBookInstancesResponse> {
    const response = await axiosInstance.get<IBookInstancesResponse>(`${BOOK_INSTANCES_BASE_URL}?libraryId=${libraryId}&page=${page}&size=${size}`)
    return response.data
  },

  // –ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–æ ID
  async getById(id: string): Promise<IBookInstanceResponse> {
    const response = await axiosInstance.get<IBookInstanceResponse>(`${BOOK_INSTANCES_BASE_URL}/${id}`)
    return response.data
  },

  // –°–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä
  async create(data: ICreateBookInstanceDto): Promise<IBookInstanceResponse> {
    const response = await axiosInstance.post<IBookInstanceResponse>(BOOK_INSTANCES_BASE_URL, data)
    return response.data
  },

  // –û–±–Ω–æ–≤–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä
  async update(id: string, data: IUpdateBookInstanceDto): Promise<IBookInstanceResponse> {
    const response = await axiosInstance.put<IBookInstanceResponse>(`${BOOK_INSTANCES_BASE_URL}/${id}`, data)
    return response.data
  },

  // –£–¥–∞–ª–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä
  async delete(id: string): Promise<void> {
    await axiosInstance.delete(`${BOOK_INSTANCES_BASE_URL}/${id}`)
  },

  // –ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∫–Ω–∏–≥–∏ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ
  async getByBookAndLibrary(bookId: string, libraryId: string): Promise<{ status: string; code: number; message: string; data: IBookInstance[] }> {
    const response = await axiosInstance.get(`${BOOK_INSTANCES_BASE_URL}/search/by-book?bookId=${bookId}&libraryId=${libraryId}`)
    return response.data
  },

  // –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∫–Ω–∏–≥–∏ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ
  async getAvailableInLibrary(bookId: string, libraryId: string): Promise<{ status: string; code: number; message: string; data: IBookInstance[] }> {
    const response = await axiosInstance.get(`${BOOK_INSTANCES_BASE_URL}/search/available?bookId=${bookId}&libraryId=${libraryId}`)
    return response.data
  },

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
  async checkAvailability(bookId: string, libraryId: string): Promise<{ status: string; code: number; message: string; data: boolean }> {
    const response = await axiosInstance.get(`${BOOK_INSTANCES_BASE_URL}/exists?bookId=${bookId}&libraryId=${libraryId}`)
    return response.data
  },

  // –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä
  async reserve(data: IReserveBookInstanceDto): Promise<IBookInstanceResponse> {
    const params = new URLSearchParams({
      bookId: data.bookId,
      libraryId: data.libraryId,
    })
   
    const response = await axiosInstance.post<IBookInstanceResponse>(`${BOOK_INSTANCES_BASE_URL}/reserve?${params.toString()}`, {})
    return response.data
  },

  // –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å
  async cancelReservation(id: string): Promise<IBookInstanceResponse> {
    const response = await axiosInstance.post<IBookInstanceResponse>(`${BOOK_INSTANCES_BASE_URL}/${id}/cancel`, {})
    return response.data
  },

  // –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ (–¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ä—è)
  async updateStatus(id: string, status: 'AVAILABLE' | 'RESERVED' | 'BORROWED' | 'LOST' | 'DAMAGED'): Promise<IBookInstanceResponse> {
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞:', { id, status })
    console.log('üîó URL:', `${BOOK_INSTANCES_BASE_URL}/${id}/status`)
    console.log('üì¶ Body:', { status })
    
    try {
      // –ë—ç–∫–µ–Ω–¥ –æ–∂–∏–¥–∞–µ—Ç PATCH —Å —Ç–µ–ª–æ–º { "status": "AVAILABLE" }
      const response = await axiosInstance.patch<IBookInstanceResponse>(
        `${BOOK_INSTANCES_BASE_URL}/${id}/status`,
        { status }
      )
      console.log('‚úÖ –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω:', response.data)
      return response.data
    } catch (error: any) {
      console.error('‚ùå –ü–û–õ–ù–ê–Ø –û–®–ò–ë–ö–ê:', error)
      console.error('‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏:', typeof error)
      console.error('‚ùå –ï—Å—Ç—å response?:', !!error.response)
      console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
        message: error.message,
        status: error.response?.status,
        statusText: error.response?.statusText,
        data: error.response?.data,
        headers: error.response?.headers,
        config: {
          url: error.config?.url,
          method: error.config?.method,
          baseURL: error.config?.baseURL,
          headers: error.config?.headers
        }
      })
      throw error
    }
  },

  // –ü—Ä–æ–¥–ª–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ (–¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ä—è)
  async extendReservation(id: string, reservedUntil: string): Promise<IBookInstanceResponse> {
    // –ë—ç–∫–µ–Ω–¥ –æ–∂–∏–¥–∞–µ—Ç PATCH —Å RequestBody
    const response = await axiosInstance.patch<IBookInstanceResponse>(`${BOOK_INSTANCES_BASE_URL}/${id}/extend`, { reservedUntil })
    return response.data
  },

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —Å –¥–µ—Ç–∞–ª—è–º–∏ (–¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ä—è)
  async getLibraryInstancesWithDetails(libraryId: string): Promise<{ status: string; code: number; message: string; data: any[] }> {
    const response = await axiosInstance.get(`${BOOK_INSTANCES_BASE_URL}?libraryId=${libraryId}`)
    return response.data
  },
}
