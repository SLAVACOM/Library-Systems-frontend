import axios from 'axios'
import { getSession } from 'next-auth/react'
import { getContentType } from './api.helper'

const SERVER_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8080/';

const axiosOptions = {
  baseURL: SERVER_URL,
  headers: getContentType(),
  withCredentials: false
};

export const instance = axios.create(axiosOptions);

export const axiosClassic = axios.create(axiosOptions);

instance.interceptors.response.use(
  (response) => response,
  (error) => {
    if (error.response)
      return Promise.reject({
        message: error.response.data.message || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
      });
    else if (error.request)
      return Promise.reject({ message: '–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞' });
    else return Promise.reject({ message: error.message });
  }
);

axiosClassic.interceptors.request.use(async (config) => {
  const session = await getSession();

  console.log('üìã –°–µ—Å—Å–∏—è:', session);

  if (session?.token) {
    config.headers.Authorization = `Bearer ${session.token}`;
    console.log('üîë –¢–æ–∫–µ–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–ø—Ä–æ—Å:', config.url);
    console.log('üîê Token preview:', session.token.substring(0, 20) + '...');
  } else {
    console.warn('‚ö†Ô∏è –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞:', config.url);
    console.warn('‚ö†Ô∏è –°–µ—Å—Å–∏—è:', session);
  }
  return config;
});

axiosClassic.interceptors.response.use(
  (response) => {
    console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç:', response.config.url, response.status);
    return response;
  },
  (error) => {
    if (error.response) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞:', {
        url: error.config?.url,
        status: error.response.status,
        statusText: error.response.statusText,
        data: error.response.data,
        headers: error.response.headers
      });
    } else if (error.request) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ (–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞):', error.request);
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    }

    return Promise.reject(error);
  }
);
