import { IAuthorReview, IAuthorReviewsResponse, ICreateAuthorReview } from '@/types/author-review.interface'
import { axiosInstance } from './api.helper'

export const AuthorReviewService = {
  async getReviews(authorId: string): Promise<IAuthorReviewsResponse> {
    try {
      console.log('üí¨ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤—ã –¥–ª—è –∞–≤—Ç–æ—Ä–∞:', authorId)
      const response = await axiosInstance.get(`api/v1/author-reviews/search?authorId=${authorId}`)
      console.log('‚úÖ –û—Ç–≤–µ—Ç –±—ç–∫–µ–Ω–¥–∞:', response.data)
      
      // –ï—Å–ª–∏ –±—ç–∫–µ–Ω–¥ –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç {} –∏–ª–∏ null
      if (!response.data || Object.keys(response.data).length === 0) {
        console.warn('‚ö†Ô∏è –ë—ç–∫–µ–Ω–¥ –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤')
        return {
          status: 'success',
          code: 200,
          message: 'No reviews available',
          data: {
            content: [],
            page: 0,
            size: 0,
            totalElements: 0,
            totalPages: 0,
            first: true,
            last: true,
            hasNext: false,
            hasPrevious: false
          }
        }
      }
      
      return response.data
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤ –∞–≤—Ç–æ—Ä–∞:', error)
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ
      console.warn('‚ö†Ô∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏')
      return {
        status: 'success',
        code: 200,
        message: 'No reviews available',
        data: {
          content: [],
          page: 0,
          size: 0,
          totalElements: 0,
          totalPages: 0,
          first: true,
          last: true,
          hasNext: false,
          hasPrevious: false
        }
      }
    }
  },

  async getUserReviews(userId: string, page: number = 0, size: number = 4): Promise<IAuthorReviewsResponse> {
    try {
      console.log('üí¨ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∞–≤—Ç–æ—Ä–∞–º:', userId)
      const response = await axiosInstance.get(`api/v1/author-reviews/search?userId=${userId}&page=${page}&size=${size}`)
      console.log('‚úÖ –û—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∞–≤—Ç–æ—Ä–∞–º –ø–æ–ª—É—á–µ–Ω—ã:', response.data)
      
      if (!response.data || Object.keys(response.data).length === 0) {
        return {
          status: 'success',
          code: 200,
          message: 'No reviews available',
          data: {
            content: [],
            page: 0,
            size: 0,
            totalElements: 0,
            totalPages: 0,
            first: true,
            last: true,
            hasNext: false,
            hasPrevious: false
          }
        }
      }
      
      return response.data
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∞–≤—Ç–æ—Ä–∞–º:', error)
      return {
        status: 'success',
        code: 200,
        message: 'No reviews available',
        data: {
          content: [],
          page: 0,
          size: 0,
          totalElements: 0,
          totalPages: 0,
          first: true,
          last: true,
          hasNext: false,
          hasPrevious: false
        }
      }
    }
  },

  async createReview(reviewData: ICreateAuthorReview): Promise<IAuthorReview> {
    try {
      console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∞:', reviewData)
      const response = await axiosInstance.post('api/v1/author-reviews', reviewData)
      console.log('‚úÖ –û—Ç–∑—ã–≤ –¥–ª—è –∞–≤—Ç–æ—Ä–∞ —Å–æ–∑–¥–∞–Ω:', response.data)
      return response.data.data || response.data
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∞:', error)
      throw error
    }
  },

  async updateReview(id: string, reviewData: Partial<ICreateAuthorReview>): Promise<IAuthorReview> {
    try {
      const response = await axiosInstance.put(`api/v1/author-reviews/${id}`, reviewData)
      return response.data.data || response.data
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞ –∞–≤—Ç–æ—Ä–∞:', error)
      throw error
    }
  },

  async deleteReview(id: string): Promise<void> {
    try {
      await axiosInstance.delete(`api/v1/author-reviews/${id}`)
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞ –∞–≤—Ç–æ—Ä–∞:', error)
      throw error
    }
  }
}
