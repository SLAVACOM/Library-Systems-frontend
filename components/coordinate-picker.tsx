'use client'

import { Button } from '@/components/ui/button'
import { MapPin, X } from 'lucide-react'
import { useEffect, useRef, useState } from 'react'

interface CoordinatePickerProps {
  latitude?: number
  longitude?: number
  onCoordinatesChange: (lat: number, lng: number) => void
  address?: string
  city?: string
}

declare global {
  interface Window {
    ymaps: any
  }
}

export default function CoordinatePicker({
  latitude,
  longitude,
  onCoordinatesChange,
  address,
  city,
}: CoordinatePickerProps) {
  const mapRef = useRef<HTMLDivElement>(null)
  const mapInstanceRef = useRef<any>(null)
  const placemarkRef = useRef<any>(null)
  const [isOpen, setIsOpen] = useState(false)
  const [isLoading, setIsLoading] = useState(false)
  const [selectedLat, setSelectedLat] = useState<number | undefined>(latitude)
  const [selectedLng, setSelectedLng] = useState<number | undefined>(longitude)

  useEffect(() => {
    setSelectedLat(latitude)
    setSelectedLng(longitude)
  }, [latitude, longitude])

  useEffect(() => {
    if (isOpen && mapRef.current) {
      loadMap()
    }

    return () => {
      if (mapInstanceRef.current) {
        mapInstanceRef.current.destroy()
        mapInstanceRef.current = null
      }
    }
  }, [isOpen])

  const loadMap = async () => {
    setIsLoading(true)

    // –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–∫—Ä–∏–ø—Ç –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç –µ—Å–ª–∏ –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
    if (!window.ymaps) {
      const script = document.createElement('script')
      const apiKey = process.env.NEXT_PUBLIC_YANDEX_MAPS_API_KEY || ''
      script.src = `https://api-maps.yandex.ru/2.1/?apikey=${apiKey}&lang=ru_RU`
      script.async = true
      document.head.appendChild(script)

      await new Promise<void>((resolve) => {
        script.onload = () => resolve()
      })
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
    window.ymaps.ready(() => {
      if (!mapRef.current || mapInstanceRef.current) return

      // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–µ–Ω—Ç—Ä –∫–∞—Ä—Ç—ã
      let center: [number, number] = [55.751244, 37.618423] // –ú–æ—Å–∫–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

      if (selectedLat && selectedLng) {
        center = [selectedLat, selectedLng]
      } else if (city) {
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –≤ –±—É–¥—É—â–µ–º
      }

      // –°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—É
      const map = new window.ymaps.Map(mapRef.current, {
        center: center,
        zoom: selectedLat && selectedLng ? 15 : 10,
        controls: ['zoomControl', 'searchControl', 'geolocationControl'],
      })

      mapInstanceRef.current = map

      // –î–æ–±–∞–≤–∏—Ç—å –º–∞—Ä–∫–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
      if (selectedLat && selectedLng) {
        addPlacemark(selectedLat, selectedLng)
      }

      // –ö–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–µ - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å/–ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –º–∞—Ä–∫–µ—Ä
      map.events.add('click', (e: any) => {
        const coords = e.get('coords')
        // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 6 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        const roundedLat = Math.round(coords[0] * 1000000) / 1000000
        const roundedLng = Math.round(coords[1] * 1000000) / 1000000
        setSelectedLat(roundedLat)
        setSelectedLng(roundedLng)
        addPlacemark(roundedLat, roundedLng)
      })

      setIsLoading(false)
    })
  }

  const addPlacemark = (lat: number, lng: number) => {
    if (!mapInstanceRef.current) return

    // –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π –º–∞—Ä–∫–µ—Ä
    if (placemarkRef.current) {
      mapInstanceRef.current.geoObjects.remove(placemarkRef.current)
    }

    // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –º–∞—Ä–∫–µ—Ä
    const placemark = new window.ymaps.Placemark(
      [lat, lng],
      {
        balloonContent: `
          <strong>–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</strong><br/>
          –®–∏—Ä–æ—Ç–∞: ${lat.toFixed(6)}<br/>
          –î–æ–ª–≥–æ—Ç–∞: ${lng.toFixed(6)}
        `,
      },
      {
        preset: 'islands#violetDotIcon',
        draggable: true,
      }
    )

    // –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞
    placemark.events.add('dragend', () => {
      const coords = placemark.geometry.getCoordinates()
      // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 6 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
      const roundedLat = Math.round(coords[0] * 1000000) / 1000000
      const roundedLng = Math.round(coords[1] * 1000000) / 1000000
      setSelectedLat(roundedLat)
      setSelectedLng(roundedLng)
    })

    mapInstanceRef.current.geoObjects.add(placemark)
    placemarkRef.current = placemark
  }

  const handleConfirm = () => {
    if (selectedLat && selectedLng) {
      // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 6 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π (—Ç–æ—á–Ω–æ—Å—Ç—å ~10 —Å–º)
      const roundedLat = Math.round(selectedLat * 1000000) / 1000000
      const roundedLng = Math.round(selectedLng * 1000000) / 1000000
      onCoordinatesChange(roundedLat, roundedLng)
      setIsOpen(false)
    }
  }

  const handleGeocodeAddress = async () => {
    if (!address || !city || !window.ymaps) return

    setIsLoading(true)
    const fullAddress = `${city}, ${address}`

    try {
      const geocoder = await window.ymaps.geocode(fullAddress)
      const firstResult = geocoder.geoObjects.get(0)

      if (firstResult) {
        const coords = firstResult.geometry.getCoordinates()
        // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 6 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        const roundedLat = Math.round(coords[0] * 1000000) / 1000000
        const roundedLng = Math.round(coords[1] * 1000000) / 1000000
        setSelectedLat(roundedLat)
        setSelectedLng(roundedLng)
        addPlacemark(roundedLat, roundedLng)
        mapInstanceRef.current?.setCenter([roundedLat, roundedLng], 15)
      } else {
        alert('–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–∫—É –Ω–∞ –∫–∞—Ä—Ç–µ –≤—Ä—É—á–Ω—É—é.')
      }
    } catch (error) {
      console.error('Geocoding error:', error)
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–¥—Ä–µ—Å–∞')
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div>
      {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è */}
      <Button
        type="button"
        variant="outline"
        className="gap-2 w-full border-violet-300 text-violet-700 hover:bg-violet-50"
        onClick={() => setIsOpen(true)}
      >
        <MapPin className="h-4 w-4" />
        {latitude && longitude ? '–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ –∫–∞—Ä—Ç–µ' : '–í—ã–±—Ä–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ –∫–∞—Ä—Ç–µ'}
      </Button>

      {/* Fullscreen –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∫–∞—Ä—Ç–æ–π */}
      {isOpen && (
        <div className="fixed inset-0 z-50 bg-black/60 flex items-center justify-center p-4">
          <div className="relative w-full h-full max-w-6xl max-h-[90vh] bg-white rounded-lg shadow-2xl overflow-hidden flex flex-col">
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
            <div className="p-4 border-b bg-violet-50 flex items-center justify-between">
              <div>
                <h3 className="text-lg font-semibold text-violet-900 flex items-center gap-2">
                  <MapPin className="h-5 w-5" />
                  –í—ã–±–æ—Ä –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –Ω–∞ –∫–∞—Ä—Ç–µ
                </h3>
                <p className="text-sm text-muted-foreground mt-1">
                  –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—É –∏–ª–∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –º–∞—Ä–∫–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ—á–Ω–æ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
                </p>
              </div>
              <Button
                variant="ghost"
                size="icon"
                onClick={() => setIsOpen(false)}
              >
                <X className="h-5 w-5" />
              </Button>
            </div>

            {/* –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ */}
            <div className="p-4 border-b bg-gray-50 flex flex-wrap items-center gap-3">
              {address && city && (
                <Button
                  type="button"
                  variant="secondary"
                  size="sm"
                  onClick={handleGeocodeAddress}
                  disabled={isLoading}
                  className="gap-2"
                >
                  <MapPin className="h-4 w-4" />
                  –ù–∞–π—Ç–∏ –ø–æ –∞–¥—Ä–µ—Å—É: {city}, {address.substring(0, 30)}...
                </Button>
              )}
              
              {selectedLat && selectedLng && (
                <div className="flex-1 text-sm bg-white px-3 py-2 rounded border border-violet-200">
                  <span className="font-medium text-violet-900">–í—ã–±—Ä–∞–Ω–æ:</span>{' '}
                  <span className="font-mono text-xs">
                    {selectedLat.toFixed(6)}, {selectedLng.toFixed(6)}
                  </span>
                </div>
              )}
            </div>

            {/* –ö–∞—Ä—Ç–∞ */}
            <div className="flex-1 relative">
              {isLoading && (
                <div className="absolute inset-0 bg-white/80 z-10 flex items-center justify-center">
                  <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-violet-600"></div>
                </div>
              )}
              <div ref={mapRef} className="w-full h-full"></div>
            </div>

            {/* –§—É—Ç–µ—Ä —Å –∫–Ω–æ–ø–∫–∞–º–∏ */}
            <div className="p-4 border-t bg-gray-50 flex items-center justify-between gap-3">
              <div className="text-sm text-muted-foreground">
                üí° –°–æ–≤–µ—Ç: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ –∏–ª–∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –º–∞—Ä–∫–µ—Ä –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
              </div>
              <div className="flex gap-3">
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => setIsOpen(false)}
                >
                  –û—Ç–º–µ–Ω–∞
                </Button>
                <Button
                  type="button"
                  onClick={handleConfirm}
                  disabled={!selectedLat || !selectedLng}
                  className="bg-violet-600 hover:bg-violet-700"
                >
                  –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                </Button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}
